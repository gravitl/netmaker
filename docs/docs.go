// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/nodes": {
            "get": {
                "tags": [
                    "Nodes"
                ],
                "summary": "Get all nodes across all networks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ApiNode"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/nodes/adm/{network}/authenticate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate to make further API calls related to a network",
                "parameters": [
                    {
                        "description": "Authentication parameters",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ApiNode": {
            "type": "object",
            "required": [
                "hostid",
                "id"
            ],
            "properties": {
                "additional_rag_ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "type": "string"
                },
                "address6": {
                    "type": "string"
                },
                "allowedips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "connected": {
                    "type": "boolean"
                },
                "defaultacl": {
                    "description": "== PRO ==",
                    "type": "string"
                },
                "dnson": {
                    "type": "boolean"
                },
                "egressgatewaynatenabled": {
                    "type": "boolean"
                },
                "egressgatewayranges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "expdatetime": {
                    "type": "integer"
                },
                "fail_over_peers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "failed_over_by": {
                    "type": "string"
                },
                "hostid": {
                    "type": "string",
                    "minLength": 5
                },
                "id": {
                    "type": "string",
                    "minLength": 5
                },
                "inet_node_req": {
                    "$ref": "#/definitions/models.InetNodeReq"
                },
                "ingressdns": {
                    "type": "string"
                },
                "internetgw_node_id": {
                    "type": "string"
                },
                "is_fail_over": {
                    "type": "boolean"
                },
                "isegressgateway": {
                    "type": "boolean"
                },
                "isingressgateway": {
                    "type": "boolean"
                },
                "isinternetgateway": {
                    "type": "boolean"
                },
                "isrelay": {
                    "type": "boolean"
                },
                "isrelayed": {
                    "type": "boolean"
                },
                "lastcheckin": {
                    "type": "integer"
                },
                "lastmodified": {
                    "type": "integer"
                },
                "lastpeerupdate": {
                    "type": "integer"
                },
                "localaddress": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "networkrange": {
                    "type": "string"
                },
                "networkrange6": {
                    "type": "string"
                },
                "pendingdelete": {
                    "type": "boolean"
                },
                "relayedby": {
                    "type": "string"
                },
                "relaynodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "server": {
                    "type": "string"
                }
            }
        },
        "models.AuthParams": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "macaddress": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InetNodeReq": {
            "type": "object",
            "properties": {
                "inet_node_client_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "response": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.24.3",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "NetMaker",
	Description:      "NetMaker API Docs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
